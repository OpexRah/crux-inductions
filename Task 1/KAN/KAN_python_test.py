from KANpython import KAN
import numpy as np
from compilevideo import images_to_video

#make grid
grid = np.linspace(0, 1, 5)
x_train = np.linspace(0, 1, 100) #this is a dataset within the bounds of the grid to train the model
y_train = np.exp(2 * np.pi * x_train) #this is the ideal function we want to approximate


def kan_on_function(grid, x_train, y_train, compile_video = False, 
                    img_path = None, video_name = None, epochs = 1000, 
                    learning_rate = 0.002):
    
    """
    Function to train the KAN model on the given function
    grid: grid points for the B-spline
    x_train: input data
    y_train: output data generated by ideal function
    compile_video: boolean, whether to compile the video of the training process
    img_path: path to save the images for the video
    video_name: name of the video to be saved
    epochs: number of iterations for training, default is 1000
    learning_rate: learning rate for gradient descent, default is 0.002
    """
    
    model = KAN(grid)
    model.train(x_train, y_train, learning_rate = learning_rate, epochs = epochs)
    model.plot_splines(x_train,y_train, title = "Predicted output", xlabel = "x", ylabel = "y", legend = True)

    if compile_video:
        model.construct_learning_video(x_train, y_train, path = img_path, epochs = epochs, learning_rate = learning_rate)
        images_to_video(img_path, video_name)

#Now, trying it on some functions

# kan_on_function(grid, x_train, y_train, compile_video = True, img_path = "Task 1/KAN/Visualisation", video_name = "exp.mp4", epochs = 1500, learning_rate = 0.0672)
# y_train = np.sin(2 * np.pi * x_train)
# kan_on_function(grid, x_train,y_train , compile_video = True, img_path = "Task 1/KAN/Visualisation", video_name = "sin.mp4", epochs = 1000, learning_rate = 0.02)
# y_train = np.cos(2 * np.pi * x_train)
# kan_on_function(grid, x_train,y_train , compile_video = True, img_path = "Task 1/KAN/Visualisation", video_name = "cos.mp4", epochs = 1000, learning_rate = 0.02)
x_train = np.linspace(-1,1,100)
# y_train = np.exp(x_train) + np.exp(-x_train)
# kan_on_function(np.linspace(-1, 1, 5), x_train ,y_train , compile_video = True, img_path = "Task 1/KAN/Visualisation", video_name = "expxplusexpmx.mp4", epochs = 1800, learning_rate = 0.06)
y_train = np.sin( x_train) + np.cos( x_train) + np.exp(-x_train)
kan_on_function(grid, x_train,y_train , epochs = 3000, learning_rate = 0.06)